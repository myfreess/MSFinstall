注：1里面没说的玩意：

f . g的意思是组合。一般来说不同的范畴论书可能用的符号还不一样，所以千万不能跳第一章。


既然Monad是一个范畴论概念，那么不可避免的问题出现了：范畴是什么？这个问题的准确答案需要向集合论求取，而粗糙的答案就好办很多。

「范畴」(Category)
 范畴是由对象和态射构成的网子。

「对象」(Object)
 对象是被人选出的一些概念，选择的过程非常自由，但是选出的对象必须符合一些条件。

「态射」(morphism | Arrow)
 连接对象的箭头，有方向。

任意范畴中的每个对象至少存在从它出发的一条态射，这条态射叫做恒等态射(identity morphism) ，顾名思义，它什么也不做。

态射必须可以复合，此处用>=>>表示态射, A >=>> B 是从对象A到对象B的态射，态射复合的意思就是假如两条态射首尾相连，就可把它们连接为一条态射。

A >=>> B

B >=>> C

组合之后得到

A >=>> C

注: 

并非同一范畴的所有对象之间都必须存在1或多个态射，举个例子，所谓离散范畴就是指有一些对象，但除了恒等态射外没有别的态射的范畴，显然离散范畴中的对象彼此之间毫无关联! 这应该是最极端的一个例子。

注: 离散范畴的一个典型例子是从集合论中的class去构造范畴，class的成员作为范畴中的对象。

这是放之四海而皆准的规则，是基础,当然以上的抽象废话基本上等于是什么也没说，即使路过的人想看来图一乐也不可得。

但是haskell语言居然能从中受益，简直难以置信 。

现在提出一个观点，将集合作为对象，函数作为态射，构建一个不新的范畴，它叫做Set，编程中最常打交道的范畴就是它(?)。

[?] 所有程序语言中的类型都可看作集合吗?

[?] haskell的类型可以看作集合吗?

根据规则，应该可以用haskell定义出Set范畴中的恒等态射。很巧，haskell在Prelude库(这是一个默认在ghci中已经import的库)中已经定义了它。

id :: a -> a
id x = x

(请勿在ghci中直接尝试输入以上代码。)

这是haskell的泛型在起作用，避免了大量实现相同作用的繁杂代码，实情是，很多时候在表达恒等态射时，需要用一个下标来表示“这是某个对象x上的恒等态射”

____  __
 ||  |  \
 ||  |  /X
‾‾‾‾ ‾‾‾

然后根据另一条规则，我们应该还可定义出态射的复合，这也很简单。

(.) :: (a -> b) -> (b -> c) -> (a -> c)
(.) f g x = f (g x)

这是haskell中的中缀操作符定义，使用方法如下:
f . g

这样就完成了f和g的复合。

函子是范畴间的映射，它会做什么？函子将一个范畴中的对象映射为目标范畴内的对象，态射也映射到目标范畴中的态射。但是原范畴的恒等态射仍然映射为恒等态射,而且保持了复合性。

形象地说，它会对一张网(原范畴)进行变形，让它可以放到另一张网上，但不割断原来的网的任何一根绳子。

这是最基本的运算和结构，接下来还有一些在编程中可能会碰到的结构，不得不品尝。

「Endomorphism」 (自态射)

type Endo a = a -> a

自态射即出发对象和终点对象相同的态射，恒等态射是自态射构成的集合中最平凡的一员。

意思就是有些对象除了恒等态射就没有其他自态射了。

更多的细节: https://ncatlab.org/nlab/show/endomorphism

「Initial/Final Objects」(初始/终端对象)

初始对象，这种对象有且仅有一个态射指向范畴中的任意对象。

终端对象，这种对象有且仅有一个态射来自范畴中的任意对象。

记得有就行。

注: haskell中Void类型为初始对象，Unit类型为终端对象。Void类型无值，对应空集，Unit类型仅有一值，对应单例集合。

「Hom-set」(Hom集)

考虑一下，任意地挑选一个范畴C，更加随意地挑选两个对象x和y，从x到y的态射合在一起构成了一个集合，用[x, y]表示。这就是Hom集了。

Note：但是到后期又会出现Hom-Object ! 在范畴C中选一个Object当成x到y的态射整体。总之并非所有范畴中的态射都构成集合。

考虑到有时需要指定这个Hom集的来源范畴，最好在开头加个范畴的名字，就像这样

e.g                       C[x, y]

「Empty Catgory」(空范畴)

故名思议，毛都没有的范畴。

https://ncatlab.org/nlab/show/empty+category


以上内容看完之后，可能已经有人要骂我了，说了这么多，和haskell有什么关系?

确实有，但是它们之间的关系并不算特别直接。只看过函子的范畴论经典定义的人, 很难直接把它和haskell中的Functor对上号(已有例子)。

那本著名的「程序员学范畴论」虽然解释很清楚，但是作者为了尽可能满足haskell玩家的好奇心，在Monad之前还介绍了一堆更抽象且haskell中没有对应实体的概念，例如极限(和余极限)，虽然符号换成了ASCII，但是换不换的其实也没什么区别，就是看不懂......而且作者为了让读者细细地品尝这些概念的个中滋味，还不断地提高看待这些概念的视角，纯度大大提升了。

所以我推荐这本书：同构-编程中的数学, pdf在github发布，完全free，只需要看第四章足矣。

如自信对抽象废话抵抗力很强可直接看A study in monads。

下面解释一下之前的交换图，交换图中的态射复合是等价的，从同一对象出去到另一对象的“连通路径”, 应该是一对同构的态射。

T[X]是自函子T将自己的映射规则应用于对象X，T^X是连续应用2次。T^^X是三次。
