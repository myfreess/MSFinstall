大概在小学时就有人教过我解方程，不过那时候没人告诉我方程居然还有次数这种东西。我解一元一次方程，也解二元一次方程组，仔细想想单个方程可以看作只有一个方程的方程组，所以其实我一直是在解n元一次的方程组，这种方程组被称作是线性的。

现在对方程组和变量做一些船新的改动，让它看起来更现代一点。

举个例子

{#-
2x + 3y + 4z = 0
4x + y + 5z = 3
-#}

不再去想它的解，不写什么=0,=2,=3了,甚至xyz也可以放弃,但是系数和系数的位置要保留。

[[2, 3, 4]
 [4, 1, 5]]

然后，对于x,y,z的任意一组值，使用(x,y,z)这样的形式来表示。

现在，把形如(x) (x,y) (x,y,z) .....这样的一组数称为向量(Vector),而改动过的线性方程组称为矩阵(Matrix)，我们得到了一个范畴(叫它Vec范畴吧!)，向量是Vec范畴中的对象，矩阵是Vec范畴中的态射。

例如，(2, 4, 0),经过上面那个矩阵的变换，它会变成什么？

使用bash来计算一下

$ echo $[(2 * 2) + (3 * 4) + (4 * 0)]
16

$ echo $[(4 * 2) + (1 * 4) + (5 * 0)]
12

最终得到的新向量是(16,12),写成竖式更直观一点
+--+
|16|
|12|
+--+

对应的位置非常显然。

那么(2,4,0)的自态射有几个？答案是只有Id

[[1,0,0]
 [0,1,0]
 [0,0,1]]

这就是所有长度为3的向量的恒等态射。

Vec范畴上能找到的Hom集显然是矩阵的集合。

附: 对应的haskell代码

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE DataKinds #-}

module Vec where

import Data.Ratio

data Nat = Z | S Nat

data LWL :: Nat -> * -> * where
   NIL  :: LWL 'Z a
   CONS :: a -> LWL n a -> LWL ('S n) a

type Matrix (n :: Nat) = LWL n (LWL n Rational)

type Vec (n :: Nat) = LWL n Rational


注:如果有数学系的同志看了过后觉得不严谨，那就把Vec范畴的定义改为:

以所有real vector spaces为对象，以所有linear transformation为态射的范畴。


